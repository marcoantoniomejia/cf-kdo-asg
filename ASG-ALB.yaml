AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  ASG-ALB.yaml is a template to create a new Application Load Balancer and Auto Scaling Group where the docker registry mirror is placed
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Parameters:
          - Subnets
        Label:
          default: Network Configuration
Mappings:
  RegionMap:
    ap-northeast-1:
      'AMI': ami-02892a4ea9bfa2192
    ap-northeast-2:
      'AMI': ami-08c64544f5cfcddd0
    ap-south-1:
      'AMI': ami-0a23ccb2cdd9286bb
    ap-southeast-1:
      'AMI': ami-082105f875acab993
    ap-southeast-2:
      'AMI': ami-0210560cedcb09f07
    ca-central-1:
      'AMI': ami-0e2407e55b9816758
    eu-central-1:
      'AMI': ami-07df274a488ca9195
    eu-north-1:
      'AMI': ami-0f0b4cb72cf3eadf3
    eu-west-1:
      'AMI': ami-0d1bf5b68307103c2
    eu-west-2:
      'AMI': ami-0dbec48abfe298cab
    eu-west-3:
      'AMI': ami-072056ff9d3689e7b
    sa-east-1:
      'AMI': ami-09b9b17384f68fd7c
    us-east-1:
      'AMI': ami-087c17d1fe0178315
    us-east-2:
      'AMI': ami-00dfe2c7ce89a450b
    us-west-1:
      'AMI': ami-011996ff98de391d1
    us-west-2:
      'AMI': ami-0c2d06d50ce30b442
Parameters:
  VPCOnica:
    Type: AWS::EC2::VPC::Id
    Description: Name of an existing VPC Where the ASG and Load Balancer will be created
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access into the docker registry mirror servers
  Sub1:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Subnet Id for the 1st Load Balancer Subnet
  Sub2:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Subnet Id for the 2nd Load Balancer Subnet
  Sub3:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Subnet Id for the 3er Load Balancer Subnet
Resources:
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable http access via port 22
      GroupName: ALBSecurityGroup
      VpcId: !Ref VPCOnica
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  ALBOnica:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALBOnica
      Scheme: internet-facing
      Subnets: 
        - !Ref Sub1
        - !Ref Sub2
        - !Ref Sub3
      Type: network
  TGOnica:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Name: TGOnica
      Protocol: TCP
      Port: 22
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCOnica
  ListenerOnicaWeb:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TGOnica
      LoadBalancerArn: !Ref ALBOnica
      Port: 22
      Protocol: TCP
  EC2WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ssh access via port 22 to EC2 Instance
      GroupName: EC2WebSecurityGroup
      VpcId: !Ref VPCOnica
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2WebSecurityGroup
      IpProtocol: TCP
      FromPort: '22'
      ToPort: '22'
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
  LaunchTemplateOnica:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /var/www/html/index.php:
              content: !Sub |
                <?php echo gethostname(); ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties: 
      LaunchTemplateName: tem-onica-web
      LaunchTemplateData: 
        ImageId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - AMI
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups: 
              - !Ref EC2WebSecurityGroup
        UserData:
          'Fn::Base64':
            !Sub |
            #!/bin/bash
            yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo systemctl enable docker
            sudo docker run \
            -d \
            -p 80:5000 \
            --restart=always \
            --name=through-cache \
            --restart always \
            -e REGISTRY_PROXY_REMOTEURL="https://registry-1.docker.io" \
            -e REGISTRY_PROXY_USERNAME=<USERNAME> \
            -e REGISTRY_PROXY_PASSWORD=<TOKEN> \
            -e REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry \
            registry
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplateOnica  --region ${AWS::Region}       
  AutoScalingWeb:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: OnicaWebAuto
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !Ref Sub1
        - !Ref Sub2
        - !Ref Sub3
      Cooldown: 120
      MinSize: '1'
      MaxSize: '6'
      DesiredCapacity: '2'
      LaunchTemplate: 
        LaunchTemplateName: tem-onica-web
        Version: !GetAtt 
          - LaunchTemplateOnica
          - LatestVersionNumber
Outputs:
  LoadBalancerDNS:
    Description: 
      The Public DNS for the LoadBalancer
    Value:
      !GetAtt 
        - ALBOnica
        - DNSName